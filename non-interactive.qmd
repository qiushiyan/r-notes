---
knitr:
    opts_chunk:
        eval: false
---

# Non-interactive mode

<https://github.com/gastonstat/tutorial-R-noninteractive>

## Using R CMD

R provides an special kind of command called `R CMD` which should be executed from the command line. This command is an interface or wrapper to various **R tools** such as processing files in R documentation format, or manipulating add-on packages. These tools are useful in conjunction with R, but not intended to be called "directly". The main source of reference to know more about `R CMD` is the R manual [An Introduction to R](https://cran.r-project.org/doc/manuals/r-release/R-intro.html)

The general form is:

    R CMD command options args

-   `command` is the name of the tool

-   `options` are the command line options of `R`

-   `args` refers to the arguments passed on to the `command`

Some of the relevant options for this tutorial are:

-   `--save` saves data sets at the end of the R session.

-   `--no-save` does not save data sets at the end of the R session.

-   `--no-environ` don't read any user file to set environment variables.

-   `--restore` restores `.RData` file in the directory where R was started

-   `--vanilla` combines `--no-save`, `--no-environ`, `--no-site-file`, `--no-init-file` and `--no-restore`

-   `--quiet`, `--silent`, and `-q` don't print out the initial copyright and welcome messages

-   `--slave` makes R run as quietly as possible.

### R CMD BATCH

Among the several available R tools, the one that we are interested in is the `BATCH` tool, which is designed to run R in batch mode.

When you run `R CMD BATCH`, the default options are `--restore --save`

To see more information, check the manual documentation by typing `?BATCH` (or `help(BATCH)`) from within an R interactive session. Or by typing `R CMD BATCH --help` from the command line.

The usage is as follows:

    R CMD BATCH options infile outfile

-   `options` are optional *options* from the command R

-   `infile` is the required input file with the code to be executed

-   `outfile` is the name of an optional output file. If no output file is provided, the name of `infile` is taken as default, appending the extension `.Rout` to it.

In `R/batch-example.R` we have

```{r filename="R/batch-example.R"}
# Regression analysis of two random vectors

# random data
x <- rnorm(20)
y <- x + rnorm(20)

# regression line
reg <- lm(y ~ x)

# scatter diagram with fitted regression line
png('scatterplot.png')
plot(x, y, las = 1, pch = 19, col = "#555555")
abline(reg, col = "#0000DD59", lwd = 2)
dev.off()

# residuals plot
png('residuals_plot.png')
plot(x, reg$residuals, las = 1, pch = 19, col = "#606060")
abline(h = 0)
dev.off()
```


Execute the script via `R CMD BATCH`

```{bash}
R CMD BATCH --vanilla R/batch-example.R
```

The batch-example.Rout file is generated as

```{bash}
cat batch-example.Rout

# R version 4.1.1 (2021-08-10) -- "Kick Things"
# Copyright (C) 2021 The R Foundation for Statistical Computing
# Platform: aarch64-apple-darwin20 (64-bit)

# R is free software and comes with ABSOLUTELY NO WARRANTY.
# You are welcome to redistribute it under certain conditions.
# Type 'license()' or 'licence()' for distribution details.

#   Natural language support but running in an English locale

# R is a collaborative project with many contributors.
# Type 'contributors()' for more information and
# 'citation()' on how to cite R or R packages in publications.

# Type 'demo()' for some demos, 'help()' for on-line help, or
# 'help.start()' for an HTML browser interface to help.
# Type 'q()' to quit R.

# > # Regression analysis of two random vectors
# >
# > # random data
# > x <- rnorm(20)
# > y <- x + rnorm(20)
# >
# > # regression line
# > reg <- lm(y ~ x)
# >
# > # scatter diagram with fitted regression line
# > png('scatterplot.png')
# > plot(x, y, las = 1, pch = 19, col = "#555555")
# > abline(reg, col = "#0000DD59", lwd = 2)
# > dev.off()
# null device
#           1
# >
# > # residuals plot
# > png('residuals_plot.png')
# > plot(x, reg$residuals, las = 1, pch = 19, col = "#606060")
# > abline(h = 0)
# > dev.off()
# null device
#           1
# >
# > proc.time()
#    user  system elapsed
#   0.084   0.023   0.108
```

Notice that the R code inside the output file is displayed with the prompt character `>`.

------------------------------------------------------------------------

`R CMD BATCH` has default options `--restore --save --no-readline`

-   `--save` saves all the objects in the workspace (i.e. all the objects created while the script was executed) into a hidden file `.RData` which is a file in R's binary format. When you save the available objects, this is known as saving the `image` (see `help(save)` for more information).

-   `--restore` will load the saved images, that is, will `load()` the content of the file `.RData` in the directory where R was started.

-   `--no-readline` turns off command-line editing via `readline`. This option is not that important.

If you don't want `R CMD BATCH` to save the image, use the option `--no-save`. Likewise, if you don't want `R CMD BATCH` to load the objects in `.RData` use `--no-restore`.

You can further modify the contents of the output file with a couple of additional options:

-   `R CMD BATCH --silent` won't print out the initial copyright and welcome messages.

-   `R CMD BATCH --no-save` won't save the workspace image (i.e. no `.RData` will be saved).

-   `R CMD BATCH --vanilla` combines `--no-save`, `--no-environ`, `--no-site-file`, `--no-init-file` and `--no-restore`.

#### **Passing arguments to a script**

In `R/batch-example.R`, the number of random values used to create vectors `x` and `y` was fixed. However, it would be nice if the user could specify a a value of `n` to control the length of the random numbers. In other words, it would be nice if we could specify a value for an argument `n` that we could pass it to the script file.

When running R scripts, often you will want to provide values for certain arguments. Luckily, `R CMD BATCH` allows you specify arguments and pass them to the script.

How to run an R script in batch mode and passing argument? You can pass parameters to scripts via additional arguments on the command line. This is done by quoting the arguments using the `--args` option:

    R CMD BATCH "--args arg1 arg2" myscript.R

To receive this command line arguments, the first line in the script would be

```{r}
# reading arguments
args <- commandArgs(TRUE)
n <- args[1]
```

Here is how to pass 50 as the first argument

    R CMD BATCH "--args 50" myscript.R


## Using Rscript

Another very useful and interesting way to run R in non-interactive mode is the command `Rscript`. This command is officially referred to as the **Scripting Front-End for R** because this is an alternative front end originally designed to be used in bash (#!) scripts and other scripting applications.

-   `Rscript` is the alternative front-end of `R CMD BATCH`

-   output goes to standard output (*stdout*)

-   `Rscript` has default options `--slave --no-restore`

In R, you can check the help documentation with `help(Rscript)`. Also, you can consult the R manual [An Introduction to R](https://cran.r-project.org/doc/manuals/r-release/R-intro.html) and read the section **Scripting with R**

The usage of `Rscript` has the following form:

    Rscript [options] [-e expr [-e expr2 ...] | file] [args]

-   `options` are options beginning with double dash `--`. These can be any of the standard `R` front-end.

-   `expr` (further expressions `expr2 ...`) refers to any R expression, and must be properly quoted

-   `file` is the name of the input file containing R commands

-   `args` are arguments to be passed to the script in `file`

### **Executing simple expressions**

One basic use of `Rscript` is to execute simple expressions using the flag `-e`. For example, to compute the sum `2 + 2`, type the following in the command line:

``` bash
Rscript -e '2 + 2'
```

You can run more than one expression using as many `-e` flags as expressions to be executed (make sure to properly quote them)

``` bash
Rscript -e '2 + 3' -e '2 * 3' -e '2 ^ 3'
```

You can also execute a compound expression with multiple commands separated with semicolons `;`

``` bash
Rscript -e '2 + 3; 2 * 3; 2 ^ 3'
```

------------------------------------------------------------------------

### Using `Rscript` with R script files

`Rscript` can be used to execute files with R code. If the script file to be run does not require the user to pass arguments, then you can run it in several ways:

``` bash
Rscript myscript.R
```

Another alternative is to call the `source()` function via an expression with the `-e` flag (be careful with the quotes):

``` bash
Rscript -e 'source("myscript.R")'
```

Here's one example of how to render an `.Rmd` (R markdown) file from the command line (again, be careful with the quotes):

``` bash
Rscript -e 'library(rmarkdown); render("document.Rmd")'
```

Here's the same command as above, but now swaping the types of quotes:

``` bash
Rscript -e "library(rmarkdown); render('document.Rmd')"
```

------------------------------------------------------------------------

## Passing arguments to `Rscript`

Some times you want to provide arguments that will be passed to the input file. The way to invoke `Rscript` and passing arguments is like this:

``` bash
Rscript script_file.R arg1 arg2
```

-   The main command is `Rscript`.

-   The name of the input R file is `script_file.R`

-   Supplied arguments are: `arg1` and `arg2`

### Toy Example: Normal Vector

Consider the hypothetical example of having a minimalist script `normal-vector.R` that generates a vector of normal random numbers---via the function `rnorm()`. This script could look like:

``` r
x <- rnorm(n, mean, sd)
cat(x)
```

In this case, it would be nice if you can supply values for `n`, `mean`, and `sd` when executing the script. For instance, say you want `n` to be 100, `mean` 5, and `sd` 1.5, you could invoke the script as:

``` bash
Rscript normal-vector.R 100 5 1.5
```

### Extracting Supplied Arguments

So how do you access any supplied arguments when calling `Rscript` from the command line? When you pass arguments to `Rscript`, these can be retrieved as a character vector with the `commandArgs()` function. For example, including a line like the one below inside the input file:

``` r
args <- commandArgs(trailingOnly = TRUE)
```

creates a character vector `args` that contains the supplied arguments. In other words, `commandArgs()` extracts the provided command line arguments.

Let's take a look at the code in the `normal-vector.R` example:

``` r
# reading arguments ('n', 'mean', 'sd')
args <- commandArgs(trailingOnly = TRUE)

n <- as.numeric(args[1])
mean <- as.numeric(args[2])
sd <- as.numeric(args[3])

x <- rnorm(n, mean, sd)
cat(x, '\n')
```

As you can tell from the snippet above, `commandArgs(TRUE)` returns a character vector with the supplied arguments. These values can then be accessed individually (e.g. `args[1]`). Because the arguments are in the form of a character vector, it's good practice to convert them into numbers with `as.numeric()`.

### More about `commandArgs()`

The function `commandArgs()` takes a logical parameter called `trailingOnly`. If you use the parameter `trailingOnly = FALSE` inside `commandArgs()`, the character vector of arguments will include the default options of calling `Rscript`. For instance, the file `show-args.R` in the `sripts/` folder consists of the following code:

``` r
args <- commandArgs(trailingOnly = FALSE)

for (i in 1:length(args)) {
    cat(args[i], '\n')
}
```

which will print all the supplied arguments (even the default ones). When you execute `show-args.R` from the command line without supplying any arguments, you should be able to see an output like the following one:

``` bash
Rscript show-args.R
```

``` bash
/Library/Frameworks/R.framework/Resources/bin/exec/R
--slave
--no-restore
--file=show-args.R
```

as you can tell, the output shows four arguments: the first one refers to the location of the executable R; the other values (`--slave`, `--no-restore`, and `--file=show-args.R`) are the default options when calling `Rscript`.

### Excluding default options as arguments

To exclude the default ("non-relevant") arguments, you have to use `commandArgs(trailingOnly = TRUE)`. The `scripts/` folder of this tutorial contains the script `listing-args.R`. This is a simple R script that reads any provided arguments, and displays the number of arguments as well as their values. You can try it like so:

``` bash
# no arguments provided
Rscript listing-args.R

# one argument provided
Rscript listing-args.R 10

# various arguments provided
Rscript listing-args.R 1 a TRUE NA yes
```
